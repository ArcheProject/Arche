<tal:main xmlns="http://www.w3.org/1999/xhtml"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      i18n:domain="Arche">

<script type="text/javascript">
	var mytemplate = ""
	+"<div class='file-row'>"
	+"	<!-- This is used as the file preview template -->"
	+"	<div>"
	+"		<span class='preview'>"
	+"		<img data-dz-thumbnail />"
	+"		</span>"
	+"	</div>"
	+"	<div>"
	+"		<p class='name' data-dz-name></p>"
	+"		<strong class='error text-danger' data-dz-errormessage></strong>"
	+"	</div>"
	+"	<div>"
	+"		<p class='size' data-dz-size></p>"
	+"		<div class='progress' role='progressbar' aria-valuemin='0' aria-valuemax='100' aria-valuenow='0'>"
	+"			<div class='progress-bar progress-bar-success' style='width:0%;' data-dz-uploadprogress></div>"
	+"		</div>"
	+"	</div>"
	+"	<div>"
	+"		<button data-dz-remove class='btn btn-danger delete'>"
	+"			<i class='glyphicon glyphicon-trash'></i>"
	+"			<span i18n:translate="">Delete</span>"
	+"		</button>"
	+"	</div>"
	+"</div>"; 
	
    Dropzone.autoDiscover = false;
	deform.addCallback(
	    '${field.oid}',
	    function(oid) {
	    	var myDropzone = new Dropzone("div#${field.oid}", {
				url: "${field.request.resource_url(field.request.context, 'upload_temp')}",
				paramName: "upload",
				acceptedFiles: "${field.widget.acceptedFiles}",
				maxFilesize: ${field.widget.maxFilesize},
				maxFiles: ${field.widget.maxFiles},
				dictDefaultMessage: 			"${field.widget.dropzoneDefaultMessage}",
				dictFallbackMessage: 			"${field.widget.dropzoneFallbackMessage}",
				dictFallbackText: 				"${field.widget.dropzoneFallbackText}",
				dictInvalidFileType:			"${field.widget.dropzoneInvalidFileType}",
				dictFileTooBig: 				"${field.widget.dropzoneFileTooBig}",
				dictResponseError: 				"${field.widget.dropzoneResponseError}",
				dictCancelUpload:	 			"${field.widget.dropzoneCancelUpload}",
				dictCancelUploadConfirmation: 	"${field.widget.dropzoneCancelUploadConfirmation}",
				dictRemoveFile: 				"${field.widget.dropzoneRemoveFile}",
				dictMaxFilesExceeded: 			"${field.widget.dropzoneMaxFilesExceeded}",
				addRemoveLinks: false,
				previewTemplate: mytemplate,
				autoQueue: true,
	        	previewsContainer: "#previews-${field.oid}", // Define the container to display the previews
	        	clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.
				init: function() {
					//this.on("addedfile", function(file) { console.log("Added file."+file); });
					//this.on("thumbnail", function(file, dataUrl) { console.log("thumbnail created for file "+file+" with url "+dataUrl); });
					this.on("success", function(file, response) {
						dropdiv = $("div#${field.oid}")[0];
						console.log(dropdiv);
						dropdiv.innerHTML += "<input type='hidden' name='${field.name}' value='" +response.uid+ "'>";
					});
					this.on("maxfilesexceeded", function(file) { this.removeFile(file); });
					this.on("canceled", function(file) {console.log(file);this.removeFile(file);});
					this.on("removedfile", function(file) {console.log("removing:"+file);});
					
					
					if(${field.hasfile})
					{
						// Create the mock file:
						var mockFile = { name: "${field.filename}", size: ${field.filesize} };
						// Call the default addedfile event handler
						
						this.emit("addedfile", mockFile);
						
						// And optionally show the thumbnail of the file:
						this.emit("thumbnail", mockFile, "${field.request.thumb_url(field.request.context, 'col-2', key='file')}");
						// If you use the maxFiles option, make sure you adjust it to the
						// correct amount:
						var existingFileCount = 1; // The number of files already uploaded
						this.options.maxFiles = this.options.maxFiles - existingFileCount;
						
						//do this one last
						this.emit("success", mockFile);
					}
				}
			});
		}
	);
</script>

<div id="${field.oid}" class="dropzone">
	<div id="actions" class="row">

  <div class="col-lg-7">
    <span class="btn btn-success fileinput-button">
        <i class="glyphicon glyphicon-plus"></i>
        <span i18n:translate="">Add files...</span>
    </span>
  </div>
</div>

</div>

<div class="table table-striped" class="files" id="previews-${field.oid}">
</div>

</tal:main>
