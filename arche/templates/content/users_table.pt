<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      xmlns:v-on="http://www.w3.org/1999/xhtml"
      xmlns:v-bind="http://www.w3.org/1999/xhtml"
      xmlns:v-model="http://www.w3.org/1999/xhtml"
      metal:use-macro="view.macro('arche:templates/base_view.pt')"
      i18n:domain="Arche">
<body>
<div metal:fill-slot="main-content">

  <h1 i18n:translate="">User(s)</h1>

  <div id="user-table" data-src="${request.resource_url(context, 'users.json')}">
    <div class="input-group" style="margin: 15px 0;">
      <span class="input-group-addon" i18n:translate="">Search</span>
      <input name="q" v-model="query" type="search" class="form-control" />
      <span class="input-group-btn">
        <button class="btn btn-default" v-on:click="reverseOrder()">
          <span v-bind:class="'glyphicon glyphicon-sort-by-attributes' + (orderReversed ? '-alt' : '')"></span>
        </button>
        <button class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Order by <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
          <li tal:repeat="(value, desc) fields"><a v-on:click="setOrder('${value}')">${desc} <span v-if="orderBy == '${value}'" class="glyphicon glyphicon-ok"></span></a></li>
        </ul>
      </span>
    </div>
    <ul class="nav nav-pills">
      <li role="presentation" v-for="page in pages" v-bind:class="page === currentPage ? 'active' : null">
        <a v-on:click="getPage(page)" v-bind:href="'#page-' + page">{{ (page*itemsPerPage)+1 }} - {{ total > (page+1)*itemsPerPage ? (page+1)*itemsPerPage : total }}</a>
      </li>
    </ul>
    <table class="table table-responsive table-striped table-hover">
      <thead>
        <tr>
          <th i18n:translate="">UserID</th>
          <th i18n:translate="">Name</th>
          <th i18n:translate="">Email</th>
          <th i18n:translate="">Created</th>
        </tr>
      </thead>
      <tbody>
        <tr v-if="typeof currentPage === 'undefined'">
          <td colspan="4">
            <span class="rotate-me glyphicon glyphicon-refresh"></span>
            <tal:ts i18n:translate="">Loading...</tal:ts>
          </td>
        </tr>
        <tr v-if="typeof currentPage !== 'undefined' && currentUsers.length===0">
          <td colspan="4">
            <span class="glyphicon glyphicon-ban-circle"></span>
            <tal:ts i18n:translate="">No user matches your search.</tal:ts>
          </td>
        </tr>
        <tr v-for="user in currentUsers">
          <td><a v-bind:href="'/users/' + user.userid">{{ user.userid }}</a></td>
          <td>{{ user.first_name }} {{ user.last_name }}</td>
          <td class="text-nowrap">
            <span v-if="user.email_validated" class="glyphicon glyphicon-ok-sign text-success" title="Email verified"></span>
            <a class="email" v-bind:href="'mailto:' + user.email">{{ user.email }}</a>
          </td>
          <td>{{ user.created }}</td>
        </tr>
      </tbody>
    </table>
  </div>
  <script type="text/javascript">
    var user_app = new Vue({
      data: {
        users: [],
        userPages: {},
        currentPage: undefined,
        total: undefined,
        itemsPerPage: 50,
        orderBy: "userid",
        orderReversed: false,
        query: ""
      },
      el: "#user-table",
      mounted: function() {
        this.getPage(0);
      },
      methods: {
        setTotal: function(total) {
          var perPage = 25;
          if (total >= 200) perPage = 50;
          if (total >= 1000) perPage = 100;
          if (total >= 4000) perPage = 200;
          this.itemsPerPage = perPage;
          this.total = total;
        },
        getRange: function(start) {
          var params = {
            start: start,
            limit: this.itemsPerPage,
            order: this.orderBy,
            q: this.query,
            reverse: this.orderReversed
          };
          return arche.do_request(this.$el.dataset.src, {data: params})
          .done(function(response) {
            for (i=0; i<response.items.length; i++) {
              this.users[start + i] = response.items[i];
            }
            this.setTotal(response.total);
          }.bind(this));
        },
        getPage: function(page) {
          if (typeof page === 'undefined') page = 0;
          var start = page*this.itemsPerPage;
          if (this.users[start]) {
            this.currentPage = page;
          } else {
            this.currentPage = undefined;
            this.getRange(start)
            .done(function() {
              this.currentPage = page;
            }.bind(this));
          }
        },
        search: function() {
          this.users = [];
          this.getPage();
        },
        searchTimer: function() {
          if (this.timer) {
            clearTimeout(this.timer);
          }
          this.timer = setTimeout(this.search.bind(this), 200);  // 200 ms
        },
        setOrder: function(value) {
          this.orderBy = value;
          this.search();
        },
        reverseOrder: function() {
          this.orderReversed = !this.orderReversed;
          this.search();
        },
      },
      computed: {
        currentUsers: function() {
          var start = this.currentPage * this.itemsPerPage;
          return this.users.slice(start, start + this.itemsPerPage);
        },
        pages: function() {
          var pages = [];
          if (typeof this.total !== 'undefined') {
            var count = Math.ceil(this.total / this.itemsPerPage);
            for (i=0; i<count; i++) {
              pages.push(i);
            }
          }
          return pages;
        }
      },
      watch: {
        query: function(val) {
          this.searchTimer();
        }
      }
    });
  </script>
</div>
</body>
</html>
